program = { decl };
decl = "let", (assign | func);
assign = ident, "=", expr;
func = ident, ":", { ident }, block;
ident = ["_"] , (letter | digit), {"_", letter | digit};
letter = ? all visibile ansi upper and lower case letters ?;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
natNumber = digit, {digit};
number = natNumber, [".", natNumber];
string = "\"", % ascii (escape codes?)%, "\"";
block = "{", { statement }, "}";
statement = for | while | (["return"], expr, ";");
for = "for", "(", expr, ";", expr, ";", expr, ")", block;
while = "while", "(", expr, ")", block;
mapConstructor = "[", "]";
if = "if", "(", expr, ")", block;
# mapLookup = expr, "[", expr, "]" | literal;
# call = expr, "(", [ expr, {",", expr} ] ")" | literal;

opEnd = literal | ident | "(", expr, ")";
opCallLookup = opEnd, (("(", [ expr, {",", expr} ] ")") | ("[", expr, "]")) | opEnd;
opUnary = ("-", "++", "--", "!"), opCallLookup | opCallLoopup, ("++", "--") | opCallLookup;
opMult = opUnary, ("*", "/", "%"), opMult | opUnary;
opAdd = opMult, ("+", "-"), opAdd | opMult;
opEq = opAdd, ("==", "!=", "<", ">", "<=", ">="), opEq | opAdd;
opBool = opEq, ("&&", "||"), opBool | opEq;
opAssign = opBool, "=", opAssign | opBool;
expr = opAssign;
literal = number | string | "true" | "false" | mapConstructor;

# TODO:
# - inline map construction
# - inline function definition
